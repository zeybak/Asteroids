using _Asteroids.Scripts.Data;
using _Asteroids.Scripts.Tags;
using Unity.Entities;

namespace _Asteroids.Scripts.Systems
{
    [UpdateBefore(typeof(DestructionSystem))]
    public class PlayerInvulnerabilitySystem : ComponentSystem
    {
        protected override void OnUpdate()
        {
            var entityManager = World.DefaultGameObjectInjectionWorld.EntityManager;
            var invulnerabilityTimeToAdd = 0f;
            var shield = Entity.Null;

            Entities.ForEach((Entity entity, ref ShieldVisualTag shieldVisualTag) =>
            {
                shield = entity;
            });
            
            Entities.ForEach((ref DestroyTag destroyTag, ref InvulnerabilityShieldPickupData invulnerabilityShieldPickupData, ref LifeSpanData lifeSpanData) =>
            {
                if (lifeSpanData.TimeLeft <= 0f) return;
                
                invulnerabilityTimeToAdd += invulnerabilityShieldPickupData.Duration;
            });
            
            Entities.ForEach((ref PlayerLivesData playerLivesData) =>
            {
                if (invulnerabilityTimeToAdd > 0f)
                    playerLivesData.InvulnerabilityTimeRemaining += invulnerabilityTimeToAdd;
                else
                    playerLivesData.InvulnerabilityTimeRemaining -= Time.DeltaTime;

                if (playerLivesData.InvulnerabilityTimeRemaining <= 0f)
                {
                    playerLivesData.InvulnerabilityTimeRemaining = 0f;
                
                    if (!shield.Equals(Entity.Null))
                        entityManager.DestroyEntity(shield);
                }
                else
                {
                    if (shield.Equals(Entity.Null))
                        shield = entityManager.Instantiate(playerLivesData.ShieldEntity);
                }
            });
        }
    }
}